/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/tasks': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all tasks
     * @description Retrieve all tasks, optionally filtered by completion status
     */
    get: {
      parameters: {
        query?: {
          /** @description Filter tasks by completion status */
          completed?: boolean;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of tasks */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              id: number;
              title: string;
              description?: string;
              completed?: boolean;
            }[];
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /**
               * @description Error message describing what went wrong
               * @example Task not found
               */
              message: string;
              /**
               * @description Error code for more specific error handling
               * @example NOT_FOUND
               */
              code?: string;
              /** @description Detailed validation errors, if applicable */
              errors?: {
                /**
                 * @description Path to the field with the error
                 * @example [
                 *       "title"
                 *     ]
                 */
                path: (string | number)[];
                /**
                 * @description Error message for this specific field
                 * @example Required
                 */
                message: string;
              }[];
            };
          };
        };
      };
    };
    put?: never;
    /**
     * Create a new task
     * @description Add a new task to the database
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            title: string;
            description?: string;
          };
        };
      };
      responses: {
        /** @description Task created successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Invalid input */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /**
               * @description Error message describing what went wrong
               * @example Task not found
               */
              message: string;
              /**
               * @description Error code for more specific error handling
               * @example NOT_FOUND
               */
              code?: string;
              /** @description Detailed validation errors, if applicable */
              errors?: {
                /**
                 * @description Path to the field with the error
                 * @example [
                 *       "title"
                 *     ]
                 */
                path: (string | number)[];
                /**
                 * @description Error message for this specific field
                 * @example Required
                 */
                message: string;
              }[];
            };
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /**
               * @description Error message describing what went wrong
               * @example Task not found
               */
              message: string;
              /**
               * @description Error code for more specific error handling
               * @example NOT_FOUND
               */
              code?: string;
              /** @description Detailed validation errors, if applicable */
              errors?: {
                /**
                 * @description Path to the field with the error
                 * @example [
                 *       "title"
                 *     ]
                 */
                path: (string | number)[];
                /**
                 * @description Error message for this specific field
                 * @example Required
                 */
                message: string;
              }[];
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tasks/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a task by ID
     * @description Retrieve a single task by its ID
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ID of the task to retrieve */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Task found */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              id: number;
              title: string;
              description?: string;
              completed?: boolean;
            };
          };
        };
        /** @description Task not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /**
               * @description Error message describing what went wrong
               * @example Task not found
               */
              message: string;
              /**
               * @description Error code for more specific error handling
               * @example NOT_FOUND
               */
              code?: string;
              /** @description Detailed validation errors, if applicable */
              errors?: {
                /**
                 * @description Path to the field with the error
                 * @example [
                 *       "title"
                 *     ]
                 */
                path: (string | number)[];
                /**
                 * @description Error message for this specific field
                 * @example Required
                 */
                message: string;
              }[];
            };
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /**
               * @description Error message describing what went wrong
               * @example Task not found
               */
              message: string;
              /**
               * @description Error code for more specific error handling
               * @example NOT_FOUND
               */
              code?: string;
              /** @description Detailed validation errors, if applicable */
              errors?: {
                /**
                 * @description Path to the field with the error
                 * @example [
                 *       "title"
                 *     ]
                 */
                path: (string | number)[];
                /**
                 * @description Error message for this specific field
                 * @example Required
                 */
                message: string;
              }[];
            };
          };
        };
      };
    };
    /**
     * Update a task
     * @description Update an existing task by its ID
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ID of the task to update */
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            title?: string;
            description?: string;
            completed?: boolean;
          };
        };
      };
      responses: {
        /** @description Task updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Invalid input */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /**
               * @description Error message describing what went wrong
               * @example Task not found
               */
              message: string;
              /**
               * @description Error code for more specific error handling
               * @example NOT_FOUND
               */
              code?: string;
              /** @description Detailed validation errors, if applicable */
              errors?: {
                /**
                 * @description Path to the field with the error
                 * @example [
                 *       "title"
                 *     ]
                 */
                path: (string | number)[];
                /**
                 * @description Error message for this specific field
                 * @example Required
                 */
                message: string;
              }[];
            };
          };
        };
        /** @description Task not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /**
               * @description Error message describing what went wrong
               * @example Task not found
               */
              message: string;
              /**
               * @description Error code for more specific error handling
               * @example NOT_FOUND
               */
              code?: string;
              /** @description Detailed validation errors, if applicable */
              errors?: {
                /**
                 * @description Path to the field with the error
                 * @example [
                 *       "title"
                 *     ]
                 */
                path: (string | number)[];
                /**
                 * @description Error message for this specific field
                 * @example Required
                 */
                message: string;
              }[];
            };
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /**
               * @description Error message describing what went wrong
               * @example Task not found
               */
              message: string;
              /**
               * @description Error code for more specific error handling
               * @example NOT_FOUND
               */
              code?: string;
              /** @description Detailed validation errors, if applicable */
              errors?: {
                /**
                 * @description Path to the field with the error
                 * @example [
                 *       "title"
                 *     ]
                 */
                path: (string | number)[];
                /**
                 * @description Error message for this specific field
                 * @example Required
                 */
                message: string;
              }[];
            };
          };
        };
      };
    };
    post?: never;
    /**
     * Delete a task
     * @description Delete a task by its ID
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ID of the task to delete */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Task deleted successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Task not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /**
               * @description Error message describing what went wrong
               * @example Task not found
               */
              message: string;
              /**
               * @description Error code for more specific error handling
               * @example NOT_FOUND
               */
              code?: string;
              /** @description Detailed validation errors, if applicable */
              errors?: {
                /**
                 * @description Path to the field with the error
                 * @example [
                 *       "title"
                 *     ]
                 */
                path: (string | number)[];
                /**
                 * @description Error message for this specific field
                 * @example Required
                 */
                message: string;
              }[];
            };
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /**
               * @description Error message describing what went wrong
               * @example Task not found
               */
              message: string;
              /**
               * @description Error code for more specific error handling
               * @example NOT_FOUND
               */
              code?: string;
              /** @description Detailed validation errors, if applicable */
              errors?: {
                /**
                 * @description Path to the field with the error
                 * @example [
                 *       "title"
                 *     ]
                 */
                path: (string | number)[];
                /**
                 * @description Error message for this specific field
                 * @example Required
                 */
                message: string;
              }[];
            };
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /**
     * @description A task item
     * @example {
     *       "id": 1,
     *       "title": "Complete OpenAPI integration",
     *       "description": "Add OpenAPI specs to the tasks API",
     *       "completed": false
     *     }
     */
    Task: {
      id: number;
      title: string;
      description?: string;
      completed?: boolean;
    };
    /** @description A collection of task items */
    Tasks: {
      id: number;
      title: string;
      description?: string;
      completed?: boolean;
    }[];
    /**
     * @description Data required to create a new task
     * @example {
     *       "title": "Create a new task",
     *       "description": "This is a new task to be created"
     *     }
     */
    NewTask: {
      title: string;
      description?: string;
    };
    /**
     * @description Data for updating an existing task
     * @example {
     *       "title": "Updated task title",
     *       "description": "Updated task description",
     *       "completed": true
     *     }
     */
    UpdateTask: {
      title?: string;
      description?: string;
      completed?: boolean;
    };
    /** @description Standard error response */
    ErrorResponse: {
      /**
       * @description Error message describing what went wrong
       * @example Task not found
       */
      message: string;
      /**
       * @description Error code for more specific error handling
       * @example NOT_FOUND
       */
      code?: string;
      /** @description Detailed validation errors, if applicable */
      errors?: {
        /**
         * @description Path to the field with the error
         * @example [
         *       "title"
         *     ]
         */
        path: (string | number)[];
        /**
         * @description Error message for this specific field
         * @example Required
         */
        message: string;
      }[];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
